## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##   https://flox.dev/docs/reference/command-reference/manifest.toml/
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
claude-code.pkg-path = "claude-code"
git.pkg-path = "git"
apacheKafka.pkg-path = "apacheKafka"
python312.pkg-path = "python312"
openjdk.pkg-path = "openjdk"
# Python packages - all via Flox (no pip needed!)
kafka-python.pkg-path = "python312Packages.kafka-python"
packaging.pkg-path = "python312Packages.packaging"
flask.pkg-path = "python312Packages.flask"
packageurl-python.pkg-path = "python312Packages.packageurl-python"
openssl.pkg-path = "openssl"
curl.pkg-path = "curl"
nodejs.pkg-path = "nodejs"
nginx.pkg-path = "nginx"
requests.pkg-path = "python312Packages.requests"
urllib3.pkg-path = "python312Packages.urllib3"

[hook]
on-activate = '''
#!/bin/bash
# SBOM2CVE Auto-Setup Hook
# This runs every time you enter the Flox environment

echo "🔧 SBOM2CVE Environment Setup"
echo ""

# Check if source code is present
if [ ! -f "scripts/demo_start.sh" ]; then
    echo "📦 Source code not found. Cloning from GitHub..."
    echo ""

    # Clone the repository into a temp directory
    TEMP_DIR=$(mktemp -d)
    git clone https://github.com/8BitTacoSupreme/sbom2cve.git "$TEMP_DIR" 2>/dev/null

    if [ $? -eq 0 ]; then
        # Move contents to current directory (excluding .flox to preserve environment)
        rsync -av --exclude='.flox' "$TEMP_DIR/" . 2>/dev/null || \
        (cd "$TEMP_DIR" && tar -cf - --exclude='.flox' .) | tar -xf -
        rm -rf "$TEMP_DIR"
        echo "✅ Source code cloned successfully"
    else
        echo "⚠️  Failed to clone repository. Please run manually:"
        echo "   git clone https://github.com/8BitTacoSupreme/sbom2cve.git"
    fi
    echo ""
fi

# Create necessary directories
mkdir -p logs data/kafka config logs .claude/context .claude/instructions .claude/templates

# Create Flox-first instructions for Claude
cat > .claude/instructions.md << "INSTRUCTIONS"
# CRITICAL: Flox Environment Management

You are working in a Flox-managed environment. ALWAYS use Flox for ALL dependency management:

## Dependency Rules:
- NEVER use: brew, apt, npm install, pip install, cargo install, etc.
- ALWAYS use: flox install <package>
- All dependencies MUST be declared in .flox/env/manifest.toml

## Flox Commands:
- Add package: flox install <package>
- Search packages: flox search <package>
- Show environment: flox list

## When Creating Projects:
1. Define all deps in manifest.toml
2. Use [profile] for PATH setup
3. Use [hook] for initialization

NEVER bypass Flox - it manages the ENTIRE environment.
INSTRUCTIONS

# Generate current environment state
echo "# Current Flox Environment" > .claude/context/flox-state.md
echo "Generated: $(date)" >> .claude/context/flox-state.md
echo "" >> .claude/context/flox-state.md
flox list >> .claude/context/flox-state.md

# Check if Kafka needs initialization
if [ ! -f data/kafka/cluster.id ]; then
    echo "⚠️  Kafka not yet initialized"
    echo "   Run: ./scripts/kafka_init.sh (first time only)"
else
    echo "✅ Kafka initialized"
fi

echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  SBOM2CVE - Nix/Flox Vulnerability Monitor"
echo "════════════════════════════════════════════════════════════════"
echo ""
echo "🚀 Quick Start:"
echo "   ./scripts/demo_start.sh      # Start everything"
echo "   ./scripts/demo_stop.sh       # Stop everything"
echo ""
echo "📖 Documentation:"
echo "   README.md                    # Main documentation"
echo "   FLOXIFICATION_PLAN.md        # Pure Flox architecture"
echo ""
echo "🔍 Useful Commands:"
echo "   flox list                    # Show installed packages"
echo "   tail -f logs/*.log           # Monitor logs"
echo ""
echo "════════════════════════════════════════════════════════════════"
'''

[vars]
# Kafka configuration
KAFKA_HEAP_OPTS = "-Xmx512M -Xms512M"

[profile]
common = '''
export CLAUDE_CONTEXT_DIR="$FLOX_ENV_PROJECT/.claude"
alias claude='claude-code --project-dir "$FLOX_ENV_PROJECT"'
export PYTHONPATH="$FLOX_ENV_PROJECT:$PYTHONPATH"
'''
